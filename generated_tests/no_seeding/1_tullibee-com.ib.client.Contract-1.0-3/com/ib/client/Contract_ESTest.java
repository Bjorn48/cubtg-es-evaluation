/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:29:51 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Contract;
import com.ib.client.UnderComp;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Contract_ESTest extends Contract_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_expiry = "a#5r5Z}@";
      Contract contract1 = new Contract();
      boolean boolean0 = contract1.equals(contract0);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract0.equals((Object)contract1));
      assertEquals(0, contract1.m_conId);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Contract contract0 = new Contract();
      Contract contract1 = new Contract();
      assertTrue(contract1.equals((Object)contract0));
      
      contract1.m_right = "BOND";
      boolean boolean0 = contract1.equals(contract0);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Contract contract0 = new Contract();
      Object object0 = contract0.clone();
      assertTrue(object0.equals((Object)contract0));
      
      contract0.m_currency = "wA]Y@&";
      boolean boolean0 = contract0.equals(object0);
      assertFalse(object0.equals((Object)contract0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_secIdType = "ws\",AVqSMl";
      Contract contract1 = (Contract)contract0.clone();
      boolean boolean0 = contract0.equals(contract1);
      assertNotSame(contract1, contract0);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(contract1.m_includeExpired);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_multiplier = "U|[A";
      Contract contract1 = new Contract();
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract1.m_includeExpired);
      assertFalse(boolean0);
      assertEquals(0, contract1.m_conId);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Contract contract0 = new Contract();
      Contract contract1 = new Contract();
      assertTrue(contract1.equals((Object)contract0));
      
      contract0.m_primaryExch = "LSaVC`e$";
      boolean boolean0 = contract1.equals(contract0);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Contract contract0 = new Contract();
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract1 = new Contract(0, (String) null, (String) null, "]S*rR", 0, (String) null, (String) null, "0S P,&90&#U7", "", (String) null, vector0, "BOND", false, (String) null, "&P{_2j#");
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0, contract1.m_conId);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_symbol = "com.ib.client.Util";
      Contract contract1 = new Contract();
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(contract1.m_includeExpired);
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Contract contract0 = new Contract();
      Contract contract1 = new Contract();
      assertTrue(contract1.equals((Object)contract0));
      
      contract1.m_secType = "com.ib.client.UnderComp";
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Contract contract0 = new Contract(724, "", (String) null, "$JA8zEg\"-S[*XyX M?", 724, "com.ib.client.UnderComp", "com.ib.client.UnderComp", (String) null, (String) null, "S", vector0, "BOND", true, "H4WGDCKO{>g^Ti$\"", (String) null);
      Vector<Object> vector1 = new Vector<Object>();
      Contract contract1 = new Contract(907, "", "com.ib.client.UnderComp", "", (-815.5), "", "", (String) null, (String) null, (String) null, vector1, "com.ib.client.UnderComp", false, "D>ojRG", "");
      contract0.equals(contract1);
      assertEquals(907, contract1.m_conId);
      assertEquals(724, contract0.m_conId);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      Contract contract0 = new Contract(40, "U|[A", "U|[A", "U|[A", 40, "U|[A", "U|[A", "U|[A", "U|[A", "U|[A", vector0, "U|[A", true, "U|[A", "U|[A");
      Object object0 = contract0.clone();
      // Undeclared exception!
      try { 
        contract0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Contract contract0 = new Contract((-138), "CclI+3t", "com.ib.client.Contract", "CclI+3t", (-138), "Mw!m6[7*zfCt5a", "Mw!m6[7*zfCt5a", "w$}({'HM@i", "CclI+3t", "w$}({'HM@i", (Vector) null, "com.ib.client.Contract", false, "CclI+3t", "com.ib.client.Contract");
      // Undeclared exception!
      try { 
        contract0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.Contract", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Contract contract0 = new Contract();
      UnderComp underComp0 = new UnderComp();
      contract0.m_underComp = underComp0;
      Contract contract1 = new Contract();
      boolean boolean0 = contract1.equals(contract0);
      assertFalse(boolean0);
      assertEquals(0, contract1.m_conId);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract0 = new Contract((-1), "~[A", "~[A", "~[A", 0.0, "~[A", "~[A", "~[A", "~[A", (String) null, vector0, "~[A", false, "~[A", (String) null);
      Object object0 = contract0.clone();
      assertTrue(object0.equals((Object)contract0));
      
      vector0.add((Object) contract0);
      contract0.equals(object0);
      assertEquals((-1), contract0.m_conId);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Contract contract0 = new Contract();
      Contract contract1 = new Contract();
      assertTrue(contract1.equals((Object)contract0));
      
      contract1.m_secId = " Ud=po}|<.`Y{}V";
      contract0.equals(contract1);
      assertFalse(contract0.m_includeExpired);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Contract contract0 = new Contract();
      Contract contract1 = new Contract();
      assertTrue(contract1.equals((Object)contract0));
      
      contract1.m_secIdType = "com.ib.client.Util";
      contract0.equals(contract1);
      assertFalse(contract0.m_includeExpired);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_localSymbol = "BOND";
      Contract contract1 = new Contract();
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract1.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Contract contract0 = new Contract();
      Contract contract1 = new Contract();
      assertTrue(contract1.equals((Object)contract0));
      
      contract0.m_right = "*`1J8~v@aEl&";
      boolean boolean0 = contract1.equals(contract0);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Contract contract0 = new Contract();
      Contract contract1 = new Contract();
      assertTrue(contract1.equals((Object)contract0));
      
      contract0.m_expiry = "A8bi]=\"\"";
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Contract contract0 = new Contract(674, "ZCsLI*D", "BOND", "ZCsLI*D", 674, "ZCsLI*D", "BOND", "`uRGx]z_ '`", "BOND", "BOND", vector0, "Ux4n:bDF~b/H", false, "BOND", ",WX*1S0P,@dp14*i");
      Object object0 = contract0.clone();
      boolean boolean0 = contract0.equals(object0);
      assertNotSame(object0, contract0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Contract contract0 = new Contract();
      Contract contract1 = new Contract();
      assertTrue(contract1.equals((Object)contract0));
      
      contract1.m_currency = "l";
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Contract contract0 = new Contract();
      Contract contract1 = new Contract();
      assertTrue(contract1.equals((Object)contract0));
      
      contract0.m_primaryExch = "LSaVC`e$";
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract1.equals((Object)contract0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_exchange = "com.ib.client.Contract";
      Contract contract1 = new Contract();
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(boolean0);
      assertFalse(contract1.m_includeExpired);
      assertFalse(contract1.equals((Object)contract0));
      assertEquals(0, contract1.m_conId);
      assertEquals(0.0, contract1.m_strike, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_secType = "-k+`;B-AJP1";
      Contract contract1 = new Contract();
      boolean boolean0 = contract0.equals(contract1);
      assertFalse(contract1.m_includeExpired);
      assertFalse(contract1.equals((Object)contract0));
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
      assertEquals(0, contract1.m_conId);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Contract contract0 = new Contract(254, "BOND", "BOND", "BOND", 254, "", "!H!kno", "!H!kno", (String) null, "", vector0, (String) null, false, "iZEt!h[74/YX", "5");
      Contract contract1 = new Contract();
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(254.0, contract0.m_strike, 0.01);
      assertFalse(boolean0);
      assertEquals(254, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract1.m_strike, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Contract contract0 = new Contract();
      Vector<Object> vector0 = new Vector<Object>();
      boolean boolean0 = contract0.equals(vector0);
      assertFalse(boolean0);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Contract contract0 = new Contract();
      boolean boolean0 = contract0.equals((Object) null);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(boolean0);
      assertEquals(0.0, contract0.m_strike, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Contract contract0 = new Contract();
      boolean boolean0 = contract0.equals(contract0);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Contract contract0 = new Contract();
      UnderComp underComp0 = new UnderComp();
      contract0.m_underComp = underComp0;
      Contract contract1 = new Contract();
      boolean boolean0 = contract0.equals(contract1);
      assertEquals(0.0, contract1.m_strike, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract0 = new Contract((-1), "~[A", "~[A", "~[A", 0.0, "~[A", "~[A", "~[A", "~[A", (String) null, vector0, "~[A", false, "~[A", (String) null);
      Contract contract1 = new Contract((-1), "(]`3:}Us,L1<T_Ezd", "~[A", "T++", 106.24169294253139, (String) null, "~[A", "", "", "BOND", contract0.m_comboLegs, "zWyf", true, "", "");
      contract1.equals(contract0);
      assertEquals(106.24169294253139, contract1.m_strike, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Contract contract0 = new Contract();
      Object object0 = contract0.clone();
      assertEquals(0.0, contract0.m_strike, 0.01);
      
      contract0.m_strike = (-1.0);
      boolean boolean0 = contract0.equals(object0);
      assertFalse(boolean0);
  }
}
