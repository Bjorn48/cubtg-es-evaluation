/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 00:06:38 GMT 2019
 */

package nu.staldal.lagoon.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import nu.staldal.lagoon.core.FileEntry;
import nu.staldal.lagoon.core.FileStorage;
import nu.staldal.lagoon.core.LagoonException;
import nu.staldal.lagoon.core.LagoonProcessor;
import nu.staldal.lagoon.core.Producer;
import nu.staldal.lagoon.core.Sitemap;
import nu.staldal.xtree.Element;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LagoonProcessor_ESTest extends LagoonProcessor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("namespace", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      
      MockFile mockFile1 = new MockFile("sitemap", "sitemap");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("sitemap", element0, mockFile0, "sitemap", mockPrintWriter0, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("namespace", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals("sitemap", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap/sitemap", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean1 = lagoonProcessor0.build(false);
      assertTrue(boolean1);
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("namespace", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.length());
      assertEquals("sitemap", mockFile1.getName());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.isAbsolute());
      assertFalse(mockFile1.isHidden());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap/sitemap", mockFile1.toString());
      assertTrue(mockFile1.isFile());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap", mockFile1.getParent());
      assertTrue(mockFile1.canExecute());
      assertTrue(mockFile1.canRead());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Element element0 = new Element("-llega0 Prducer onig file: ", "sitemap");
      assertNotNull(element0);
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertNull(element0.getPublicId());
      assertEquals("-llega0 Prducer onig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "sitemap", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertNull(element0.getPublicId());
      assertEquals("-llega0 Prducer onig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      
      FileStorage fileStorage0 = lagoonProcessor0.getTargetLocation();
      assertNotNull(fileStorage0);
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertNull(element0.getPublicId());
      assertEquals("-llega0 Prducer onig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertFalse(fileStorage0.needPassword());
      assertTrue(fileStorage0.isReentrant());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      
      MockFile mockFile0 = new MockFile("sitemap");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertFalse(mockFile0.isFile());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      boolean boolean1 = mockFile0.setReadOnly();
      assertTrue(boolean1);
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(boolean1 == boolean0);
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      File file0 = lagoonProcessor0.getSourceRootDir();
      assertNotNull(file0);
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertFalse(file0.canExecute());
      assertEquals(1392409281320L, file0.lastModified());
      assertFalse(file0.isFile());
      assertTrue(file0.exists());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("sitemap", file0.getName());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap", file0.toString());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation", file0.getParent());
      assertFalse(file0.canWrite());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(mockFile0, file0);
      assertNotSame(file0, mockFile0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Element element0 = new Element("-llega0 Prducer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      assertFalse(element0.isWhitespaceNode());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "-llega0 Prducer onfig file: ");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals("-llega0 Prducer onfig file: ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/-llega0 Prducer onfig file: ", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      assertFalse(element0.isWhitespaceNode());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("-llega0 Prducer onfig file: ", mockFile0.getName());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/-llega0 Prducer onfig file: ", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      // Undeclared exception!
      try { 
        lagoonProcessor0.loadClassFromRepository((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Element element0 = new Element("-llega0!Prducer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("-llega0!Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertFalse(element0.isWhitespaceNode());
      assertEquals("", element0.getTextContentOrNull());
      assertNull(element0.getSystemId());
      assertEquals(0, element0.numberOfChildren());
      assertNull(element0.getPublicId());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "-llega0!Prducer onfig file: ");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/-llega0!Prducer onfig file: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("-llega0!Prducer onfig file: ", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("-llega0!Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertFalse(element0.isWhitespaceNode());
      assertEquals("", element0.getTextContentOrNull());
      assertNull(element0.getSystemId());
      assertEquals(0, element0.numberOfChildren());
      assertNull(element0.getPublicId());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/-llega0!Prducer onfig file: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals("-llega0!Prducer onfig file: ", mockFile0.getName());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      
      // Undeclared exception!
      try { 
        lagoonProcessor0.loadClassFromRepository("nu.staldal.lagoon.producer.FOPFormatter");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Element element0 = new Element("-llega0 Prducer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getSystemId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getPublicId());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "sitemap", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getSystemId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getPublicId());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      try { 
        lagoonProcessor0.loadClassFromRepository("-llega0 Prducer onfig file: ");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Element element0 = new Element("CczFe9", "sitemap");
      assertNotNull(element0);
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertNull(element0.getSystemId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getPublicId());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getLineNumber());
      
      MockFile mockFile0 = new MockFile("sitemap");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("sitemap", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("sitemap", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertNull(element0.getSystemId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getPublicId());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getLineNumber());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertEquals("sitemap", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      
      // Undeclared exception!
      try { 
        lagoonProcessor0.getFileURLRelativeTo("CczFe9", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nu.staldal.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertFalse(element0.isWhitespaceNode());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertNull(element0.getSystemId());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      
      MockFile mockFile0 = new MockFile("&Xq'w#@C]!;E%%YWY] ", "");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals("&Xq'w#@C]!;E%%YWY] ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation", mockFile0.getParent());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/&Xq'w#@C]!;E%%YWY] ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "}T))ZWz0)n.O", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertFalse(element0.isWhitespaceNode());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertNull(element0.getSystemId());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("&Xq'w#@C]!;E%%YWY] ", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation", mockFile0.getParent());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/&Xq'w#@C]!;E%%YWY] ", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      
      // Undeclared exception!
      try { 
        lagoonProcessor0.createFileStorage((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Element element0 = new Element("CczFe9", "sitemap");
      assertNotNull(element0);
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertNull(element0.getPublicId());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      
      MockFile mockFile0 = new MockFile("sitemap");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("sitemap", element0, mockFile0, (String) null, (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertNull(element0.getPublicId());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      // Undeclared exception!
      try { 
        lagoonProcessor0.canCheckFileHasBeenUpdated((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nu.staldal.util.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Element element0 = new Element("Ille}al Producer config file: ", "Ille}al Producer config file: ");
      assertNotNull(element0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("Ille}al Producer config file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("Ille}al Producer config file: ", element0.getLocalName());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      LagoonProcessor lagoonProcessor0 = null;
      try {
        lagoonProcessor0 = new LagoonProcessor((String) null, element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertNull(element0.getSystemId());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      
      MockFile mockFile0 = new MockFile((String) null, "uloAE%`jZbBlR!9C");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "uloAE%`jZbBlR!9C", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertNull(element0.getSystemId());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      
      boolean boolean1 = lagoonProcessor0.putObjectIntoRepository((String) null, "/5{P-cDn|X~K", (Object) null);
      assertFalse(boolean1);
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertNull(element0.getSystemId());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertFalse(mockFile0.isFile());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertNull(element0.getPublicId());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertFalse(element0.isWhitespaceNode());
      assertEquals((-1), element0.getColumnNumber());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "Illegal Producer onfig file: ", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertNull(element0.getPublicId());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertFalse(element0.isWhitespaceNode());
      assertEquals((-1), element0.getColumnNumber());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      Object object0 = lagoonProcessor0.getObjectFromRepository("Producer class cannot be found:", "Illegal Producer onfig file: ");
      assertNull(object0);
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertNull(element0.getPublicId());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertFalse(element0.isWhitespaceNode());
      assertEquals((-1), element0.getColumnNumber());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals((-1), element0.getLineNumber());
      
      MockFile mockFile0 = new MockFile((String) null, "uloAE%`jZbBlR!9C");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "uloAE%`jZbBlR!9C", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      OutputStream outputStream0 = lagoonProcessor0.storeFileInRepository("${O$:TG,Evc-B]}6", "nu.staldal.lagoon.producer.IslandSplit");
      assertNull(outputStream0);
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals("uloAE%`jZbBlR!9C", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("sitemap", element0.getLocalName());
      assertFalse(element0.isWhitespaceNode());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      
      MockFile mockFile0 = new MockFile("sitemap");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("sitemap", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("sitemap", element0.getLocalName());
      assertFalse(element0.isWhitespaceNode());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("sitemap", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      
      InputStream inputStream0 = lagoonProcessor0.readFileFromRepository("Unable to instantiate producer class (instantiation failed): ", "Illegal Producer onfig file: ");
      assertNull(inputStream0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("sitemap", element0.getLocalName());
      assertFalse(element0.isWhitespaceNode());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("sitemap", mockFile0.toString());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals((-1), element0.getColumnNumber());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "Illegal Producer onfig file: ");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/Illegal Producer onfig file: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("Illegal Producer onfig file: ", mockFile0.getName());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "Illegal Producer onfig file: ", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals((-1), element0.getColumnNumber());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/Illegal Producer onfig file: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("Illegal Producer onfig file: ", mockFile0.getName());
      
      lagoonProcessor0.reloadClasses();
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals((-1), element0.getColumnNumber());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/Illegal Producer onfig file: ", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals("Illegal Producer onfig file: ", mockFile0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "Illegal Producer onfig file: ", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isFile());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      
      // Undeclared exception!
      try { 
        lagoonProcessor0.getFileURLRelativeTo("sitemap", "res:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base must be a pseudo-absolute URL
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Element element0 = new Element("CczFe9", "sitemap");
      assertNotNull(element0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      
      MockFile mockFile0 = new MockFile("sitemap");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals("sitemap", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("sitemap", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("sitemap", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      String string0 = lagoonProcessor0.getFileURLRelativeTo("http://www.w3.org/XML/1998/namespace", "CczFe9");
      assertNotNull(string0);
      assertEquals("http://www.w3.org/XML/1998/namespace", string0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("sitemap", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertFalse(element0.isWhitespaceNode());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      
      MockFile mockFile0 = new MockFile("", "Illegal Producer onfig file: ");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Illegal Producer onfig file: ", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertEquals("Illegal Producer onfig file: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertFalse(element0.isWhitespaceNode());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Illegal Producer onfig file: ", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertEquals("Illegal Producer onfig file: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      
      boolean boolean1 = lagoonProcessor0.canCheckFileHasBeenUpdated("res:Illegal Producer config file: ");
      assertTrue(boolean1);
      assertFalse(element0.isWhitespaceNode());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getLineNumber());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertEquals((-1), element0.getColumnNumber());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/Illegal Producer onfig file: ", mockFile0.toString());
      assertEquals("/", mockFile0.getParent());
      assertEquals("Illegal Producer onfig file: ", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Element element0 = new Element("CczFe9", "sitemap");
      assertNotNull(element0);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      
      MockFile mockFile0 = new MockFile("sitemap");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("sitemap", element0, mockFile0, "sitemap", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      boolean boolean1 = lagoonProcessor0.canCheckFileHasBeenUpdated("file:http:");
      assertTrue(boolean1);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals("CczFe9", element0.getNamespaceURI());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfAttributes());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isFile());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertNull(element0.getPublicId());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("namespace", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      
      MockFile mockFile1 = new MockFile("sitemap", "sitemap");
      assertNotNull(mockFile1);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      assertNotNull(mockPrintWriter0);
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("sitemap", element0, mockFile0, "sitemap", mockPrintWriter0, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertNull(element0.getPublicId());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("namespace", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("sitemap", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap/sitemap", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      
      boolean boolean1 = lagoonProcessor0.canCheckFileHasBeenUpdated("part:");
      assertTrue(boolean1);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertNull(element0.getPublicId());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("namespace", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.exists());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile1.length());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertEquals("sitemap", mockFile1.getName());
      assertFalse(mockFile1.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap", mockFile1.getParent());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canWrite());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap/sitemap", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertFalse(mockFile1.isHidden());
      assertTrue(mockFile1.canExecute());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isFile());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.exists());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals("", element0.getTextContentOrNull());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      
      MockFile mockFile0 = new MockFile("sitemap");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("sitemap", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals("", element0.getTextContentOrNull());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("sitemap", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      
      boolean boolean1 = lagoonProcessor0.canCheckFileHasBeenUpdated("http://www.w3.org/XML/1998/namespace");
      assertFalse(boolean1);
      assertEquals((-1), element0.getColumnNumber());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals("", element0.getTextContentOrNull());
      assertNull(element0.getPublicId());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("sitemap", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.isDirectory());
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Element element0 = new Element("-llega0 Prducer onig file: ", "sitemap");
      assertNotNull(element0);
      assertNull(element0.getPublicId());
      assertEquals("-llega0 Prducer onig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "sitemap", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertNull(element0.getPublicId());
      assertEquals("-llega0 Prducer onig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      boolean boolean1 = lagoonProcessor0.canCheckFileHasBeenUpdated("sitemap");
      assertTrue(boolean1);
      assertNull(element0.getPublicId());
      assertEquals("-llega0 Prducer onig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("namespace", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Element element0 = new Element("-llega0 Prducer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "-llega0 Prducer onfig file: ");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/-llega0 Prducer onfig file: ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("-llega0 Prducer onfig file: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/-llega0 Prducer onfig file: ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("-llega0 Prducer onfig file: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      
      FileStorage fileStorage0 = lagoonProcessor0.createFileStorage("-llega0 Prducer onfig file: ");
      assertNotNull(fileStorage0);
      assertNull(element0.getPublicId());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfChildren());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/-llega0 Prducer onfig file: ", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.isDirectory());
      assertEquals("-llega0 Prducer onfig file: ", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canWrite());
      assertFalse(fileStorage0.needPassword());
      assertTrue(fileStorage0.isReentrant());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Element element0 = new Element("-llega0 Prducer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfChildren());
      assertNull(element0.getPublicId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("namespace", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfChildren());
      assertNull(element0.getPublicId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("namespace", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      
      Producer producer0 = lagoonProcessor0.createProducer("", "");
      assertNull(producer0);
      assertEquals("sitemap", element0.getLocalName());
      assertNull(element0.getSystemId());
      assertEquals("-llega0 Prducer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertFalse(element0.isWhitespaceNode());
      assertEquals(0, element0.numberOfAttributes());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals(0, element0.numberOfChildren());
      assertNull(element0.getPublicId());
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertEquals("namespace", mockFile0.getName());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canRead());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998/namespace", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/http:/www.w3.org/XML/1998/namespace/http:/www.w3.org/XML/1998", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      assertNotNull(element0);
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals(0, element0.numberOfAttributes());
      assertNull(element0.getPublicId());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertFalse(element0.isWhitespaceNode());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      
      MockFile mockFile0 = new MockFile("sitemap");
      assertNotNull(mockFile0);
      
      boolean boolean0 = mockFile0.mkdirs();
      assertTrue(boolean0);
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      assertNotNull(lagoonProcessor0);
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals(0, element0.numberOfAttributes());
      assertNull(element0.getPublicId());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertFalse(element0.isWhitespaceNode());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      
      Producer producer0 = lagoonProcessor0.createProducer("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      assertNull(producer0);
      assertEquals("", element0.getTextContentOrNull());
      assertEquals(0, element0.numberOfNamespaceMappings());
      assertEquals(0, element0.numberOfChildren());
      assertEquals(0, element0.numberOfAttributes());
      assertNull(element0.getPublicId());
      assertNull(element0.getSystemId());
      assertEquals("sitemap", element0.getLocalName());
      assertFalse(element0.isWhitespaceNode());
      assertEquals((-1), element0.getColumnNumber());
      assertEquals("Illegal Producer onfig file: ", element0.getNamespaceURI());
      assertEquals((-1), element0.getLineNumber());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("sitemap", mockFile0.toString());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertEquals("sitemap", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertTrue(mockFile0.isDirectory());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Element element0 = new Element("CczFe9", "sitemap");
      MockFile mockFile0 = new MockFile("sitemap");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("sitemap", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      lagoonProcessor0.storeClassInRepository("http://www.w3.org/XML/1998/namespace");
      lagoonProcessor0.deleteClassInRepository("http://www.w3.org/XML/1998/namespace");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      MockFile mockFile0 = new MockFile("sitemap");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      try { 
        lagoonProcessor0.deleteClassInRepository("user.home");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unable to delete file: /home/pderakhshanfar/.lagoon/temp/classes/user.home.class
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      MockFile mockFile0 = new MockFile((String) null, "jpeg");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "jpeg", (PrintWriter) null, (PrintWriter) null);
      lagoonProcessor0.storeClassInRepository("");
      lagoonProcessor0.destroy();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Element element0 = new Element("CczTF9", "sitemap");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pderakhshanfar/.lagoon/temp/classes");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "sitemap");
      MockFile mockFile0 = new MockFile("http:");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = null;
      try {
        lagoonProcessor0 = new LagoonProcessor("http:", element0, mockFile0, "http:", (PrintWriter) null, (PrintWriter) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unable to create directory (a file with that name exists): /home/pderakhshanfar/.lagoon/temp/classes
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pderakhshanfar/.lagoon/temp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "http://www.w3.org/XML/1998/namespace");
      MockFile mockFile0 = new MockFile((String) null, "uloAE%`jZbBlR!9C");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = null;
      try {
        lagoonProcessor0 = new LagoonProcessor("2],|PR7};SS$=", element0, mockFile0, "ZF~q@ymV0i1bX,5.?", (PrintWriter) null, (PrintWriter) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unable to create directory (a file with that name exists): /home/pderakhshanfar/.lagoon/temp
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      MockFile mockFile0 = new MockFile((String) null, "http://www.w3.org/XML/1998/namespace");
      mockFile0.mkdirs();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pderakhshanfar/.lagoon");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Y`");
      LagoonProcessor lagoonProcessor0 = null;
      try {
        lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "Illegal Producer onfig file: ", (PrintWriter) null, (PrintWriter) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unable to create directory (a file with that name exists): /home/pderakhshanfar/.lagoon
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "uloAE%`jZbBlR!9C");
      mockFile0.mkdirs();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pderakhshanfar");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      Element element0 = new Element("uloAE%`jZbBlR!9C", "sitemap");
      LagoonProcessor lagoonProcessor0 = null;
      try {
        lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "uloAE%`jZbBlR!9C", (PrintWriter) null, (PrintWriter) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Unable to create directory: /home/pderakhshanfar/.lagoon
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      MockFile mockFile0 = new MockFile("sitemap");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      LagoonProcessor lagoonProcessor1 = new LagoonProcessor("", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      assertFalse(lagoonProcessor1.equals((Object)lagoonProcessor0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Element element0 = new Element("Illegal Producer config file: ", "Illegal Producer config file: ");
      MockFile mockFile0 = new MockFile("Illegal Producer config file: ", "Illegal Producer config file: ");
      LagoonProcessor lagoonProcessor0 = null;
      try {
        lagoonProcessor0 = new LagoonProcessor("ftp://", element0, mockFile0, "ftp://", (PrintWriter) null, (PrintWriter) null);
        fail("Expecting exception: LagoonException");
      
      } catch(Throwable e) {
         //
         // sourceDir must be an existing directory: /home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/Illegal Producer config file: /Illegal Producer config file: 
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Element element0 = new Element("Illegal Producer config file: ", "Illegal Producer config file: ");
      MockFile mockFile0 = new MockFile("Illegal Producer config file: ", "Illegal Producer config file: ");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      LagoonProcessor lagoonProcessor0 = null;
      try {
        lagoonProcessor0 = new LagoonProcessor("ftp://", element0, mockFile0, (String) null, mockPrintWriter0, mockPrintWriter0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("nu.staldal.lagoon.core.LagoonProcessor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      MockFile mockFile0 = new MockFile("sitemap");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "", (PrintWriter) null, (PrintWriter) null);
      Object object0 = lagoonProcessor0.getObjectFromRepository("http://www.w3.org/XML/1998/namespace");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Element element0 = new Element("-llega0 Prducer onig file: ", "sitemap");
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "sitemap", (PrintWriter) null, (PrintWriter) null);
      File file0 = lagoonProcessor0.getTempDir();
      assertTrue(file0.canRead());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Element element0 = new Element("CczFe9", "sitemap");
      MockFile mockFile0 = new MockFile("sitemap");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("sitemap", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      OutputStream outputStream0 = lagoonProcessor0.storeFileInRepository("CczFe9");
      assertNull(outputStream0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Element element0 = new Element("-llega0 Prducer onfig file: ", "sitemap");
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "", (PrintWriter) null, (PrintWriter) null);
      boolean boolean0 = lagoonProcessor0.putObjectIntoRepository("", mockFile0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Element element0 = new Element("CczFe9", "sitemap");
      MockFile mockFile0 = new MockFile("sitemap");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("sitemap", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      String string0 = lagoonProcessor0.getProperty("http://www.w3.org/XML/1998/namespace");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      MockFile mockFile0 = new MockFile("sitemap");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "http://www.w3.org/XML/1998/namespace", (PrintWriter) null, (PrintWriter) null);
      Sitemap sitemap0 = lagoonProcessor0.getSitemap();
      FileEntry fileEntry0 = new FileEntry(lagoonProcessor0, sitemap0, "http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace", mockFile0, mockFile0);
      assertNull(fileEntry0.getCurrentTargetURL());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      MockFile mockFile0 = new MockFile("sitemap");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "", (PrintWriter) null, (PrintWriter) null);
      File file0 = lagoonProcessor0.getSourceRootDir();
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/sitemap", file0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Element element0 = new Element("Illegal Producer onfig file: ", "sitemap");
      MockFile mockFile0 = new MockFile((String) null, "jpeg");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("", element0, mockFile0, "jpeg", (PrintWriter) null, (PrintWriter) null);
      Class class0 = lagoonProcessor0.loadClassFromRepository("nu.staldal.lagoon.core.LagoonProcessor");
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Element element0 = new Element("-llega0 Prducer onig file: ", "sitemap");
      MockFile mockFile0 = new MockFile("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      mockFile0.mkdirs();
      LagoonProcessor lagoonProcessor0 = new LagoonProcessor("http://www.w3.org/XML/1998/namespace", element0, mockFile0, "sitemap", (PrintWriter) null, (PrintWriter) null);
      InputStream inputStream0 = lagoonProcessor0.readFileFromRepository("-llega0 Prducer onig file: ");
      assertNull(inputStream0);
  }
}
