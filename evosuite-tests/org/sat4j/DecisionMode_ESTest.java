/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:29:14 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.DecisionMode;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.OptimizationMode;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.LecteurDimacs;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IGroupSolver;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DecisionMode_ESTest extends DecisionMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<FullClauseSelectorSolver<OptToSatAdapter>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<OptToSatAdapter>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<FullClauseSelectorSolver<OptToSatAdapter>> basicLauncher0 = new BasicLauncher<FullClauseSelectorSolver<OptToSatAdapter>>(aSolverFactory0);
      MockFile mockFile0 = new MockFile(">N5]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsStringSolver0);
      decisionMode0.solve(dimacsStringSolver0, groupedCNFReader0, basicLauncher0, mockPrintWriter0, 40L);
      assertFalse(groupedCNFReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      NegationDecorator<OptToSatAdapter> negationDecorator0 = (NegationDecorator<OptToSatAdapter>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(negationDecorator0).isSatisfiable();
      NegationDecorator<NegationDecorator<OptToSatAdapter>> negationDecorator1 = new NegationDecorator<NegationDecorator<OptToSatAdapter>>(negationDecorator0);
      InstanceReader instanceReader0 = new InstanceReader(negationDecorator1);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      MockFile mockFile0 = new MockFile("Call the compute method first!");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      decisionMode0.solve(negationDecorator1, instanceReader0, mUSLauncher0, mockPrintWriter0, (byte) (-122));
      decisionMode0.getCurrentExitCode();
      assertEquals(ExitCode.SATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(iSolver0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      // Undeclared exception!
      try { 
        decisionMode0.solve((IProblem) null, lecteurDimacs0, (ILogAble) null, printWriter0, (-2569L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      // Undeclared exception!
      try { 
        optimizationMode0.onUnsatTermination();
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      DecisionMode decisionMode0 = new DecisionMode();
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0, (-1L));
      ASolverFactory<FullClauseSelectorSolver<OptToSatAdapter>> aSolverFactory0 = (ASolverFactory<FullClauseSelectorSolver<OptToSatAdapter>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<FullClauseSelectorSolver<OptToSatAdapter>> basicLauncher0 = new BasicLauncher<FullClauseSelectorSolver<OptToSatAdapter>>(aSolverFactory0);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      decisionMode0.displayResult(subModelIterator0, subModelIterator0, basicLauncher0, printWriter0, (Reader) null, 806L, true);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.onUnsatTermination();
      assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      int[] intArray0 = new int[0];
      NegationDecorator<OptToSatAdapter> negationDecorator0 = (NegationDecorator<OptToSatAdapter>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(negationDecorator0).isSatisfiable();
      doReturn(intArray0).when(negationDecorator0).model();
      NegationDecorator<NegationDecorator<OptToSatAdapter>> negationDecorator1 = new NegationDecorator<NegationDecorator<OptToSatAdapter>>(negationDecorator0);
      DimacsReader dimacsReader0 = new DimacsReader(negationDecorator1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("timeout");
      decisionMode0.solve(negationDecorator1, dimacsReader0, (ILogAble) null, mockPrintWriter0, 857L);
      decisionMode0.onSolutionFound(intArray0);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(negationDecorator1, negationDecorator1, (ILogAble) null, mockPrintWriter0, dimacsReader0, 37, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      NegationDecorator<OptToSatAdapter> negationDecorator0 = (NegationDecorator<OptToSatAdapter>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(negationDecorator0).isSatisfiable();
      NegationDecorator<NegationDecorator<OptToSatAdapter>> negationDecorator1 = new NegationDecorator<NegationDecorator<OptToSatAdapter>>(negationDecorator0);
      DimacsReader dimacsReader0 = new DimacsReader(negationDecorator1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("timeout");
      decisionMode0.solve(negationDecorator1, dimacsReader0, (ILogAble) null, mockPrintWriter0, 857L);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(negationDecorator1, negationDecorator1, (ILogAble) null, mockPrintWriter0, dimacsReader0, (-1), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      int[] intArray0 = new int[0];
      NegationDecorator<OptToSatAdapter> negationDecorator0 = (NegationDecorator<OptToSatAdapter>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(negationDecorator0).isSatisfiable();
      doReturn((int[]) null).when(negationDecorator0).model();
      NegationDecorator<NegationDecorator<OptToSatAdapter>> negationDecorator1 = new NegationDecorator<NegationDecorator<OptToSatAdapter>>(negationDecorator0);
      DimacsReader dimacsReader0 = new DimacsReader(negationDecorator1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("timeout");
      decisionMode0.solve(negationDecorator1, dimacsReader0, (ILogAble) null, mockPrintWriter0, 857L);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(negationDecorator1, negationDecorator1, (ILogAble) null, mockPrintWriter0, dimacsReader0, 37, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      IGroupSolver iGroupSolver0 = mock(IGroupSolver.class, new ViolatedAssumptionAnswer());
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(iGroupSolver0);
      decisionMode0.displayResult((ISolver) null, (IProblem) null, (ILogAble) null, printWriter0, groupedCNFReader0, 2812L, false);
      assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ExitCode exitCode0 = ExitCode.UNSATISFIABLE;
      decisionMode0.setExitCode(exitCode0);
      assertEquals(ExitCode.UNSATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.setIncomplete(true);
      assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ExitCode exitCode0 = decisionMode0.getCurrentExitCode();
      assertEquals(0, exitCode0.value());
  }
}
