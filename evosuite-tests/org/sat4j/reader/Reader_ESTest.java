/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:23:44 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringReader;
import java.util.zip.ZipException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.reader.AAGReader;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.LecteurDimacs;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.encoding.Binary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Reader_ESTest extends Reader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, ")$Fww");
      dimacsReader0.getMapping();
      assertFalse(dimacsReader0.isVerbose());
      assertFalse(dimacsReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(dimacsOutputSolver0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("5?#etX");
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        lecteurDimacs0.parseInstance("5?#etX");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing ErrorDIMACS error: wrong max number of variables
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(dimacsOutputSolver0);
      try { 
        lecteurDimacs0.parseInstance("http://");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: 
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      InstanceReader instanceReader0 = new InstanceReader(modelIterator0);
      // Undeclared exception!
      try { 
        instanceReader0.parseInstance((InputStream) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use a domain specific Reader (LecteurDimacs, AIGReader, etc.) for stream input 
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{x/g4u):Les#g Ru>6");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      InputStream inputStream0 = Reader.getInputStreamFromFilename("{x/g4u):Les#g Ru>6");
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance(inputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      // Undeclared exception!
      try { 
        instanceReader0.hasAMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<ModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIterator>(modelIterator0, binary0);
      InstanceReader instanceReader0 = new InstanceReader(clausalCardinalitiesDecorator0);
      // Undeclared exception!
      try { 
        instanceReader0.getMapping();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        Reader.getInputStreamFromFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("{x/g4u):Les#g Ru>6");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InstanceReader instanceReader0 = new InstanceReader((ISolver) null);
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        instanceReader0.decode(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.InstanceReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".bz2");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "5/ F1w=>?L\"IW");
      try { 
        Reader.getInputStreamFromFilename(".bz2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot start processes in a unit test
         //
         verifyException("org.evosuite.runtime.mock.java.lang.MockRuntime", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("~wwoS,$ux.gz");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "http:// conflicts\n");
      try { 
        Reader.getInputStreamFromFilename("~wwoS,$ux.gz");
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        Reader.getInputStreamFromFilename("http://Y-R");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: Y-R
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{x/g4u):Les#g Ru>6");
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs((ISolver) null);
      // Undeclared exception!
      try { 
        lecteurDimacs0.parseInstance("{x/g4u):Les#g Ru>6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.LecteurDimacs", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(dimacsOutputSolver0);
      try { 
        lecteurDimacs0.parseInstance("http[//org.sat4j.specs.FakeConstr");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(dimacsOutputSolver0);
      assertFalse(lecteurDimacs0.isVerbose());
      
      lecteurDimacs0.setVerbosity(true);
      assertTrue(lecteurDimacs0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AAGReader aAGReader0 = new AAGReader((ISolver) null);
      boolean boolean0 = aAGReader0.isVerbose();
      assertFalse(boolean0);
      assertFalse(aAGReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "OY-R.lzma");
      StringReader stringReader0 = new StringReader("http://{x/g4u):Les#g Ru>6.gz");
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((java.io.Reader) stringReader0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Use #parseInstance(InputStream) instead
         //
         verifyException("org.sat4j.reader.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      LecteurDimacs lecteurDimacs0 = new LecteurDimacs(dimacsOutputSolver0);
      lecteurDimacs0.setUseMapping(false);
      assertFalse(lecteurDimacs0.isVerbose());
      assertFalse(lecteurDimacs0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "e=\"rJ/7]:XFe}-*\"");
      boolean boolean0 = dimacsReader0.hasAMapping();
      assertFalse(dimacsReader0.isVerbose());
      assertFalse(dimacsReader0.isUsingMapping());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "e=\"rJ/7]:XFe}-*\"");
      boolean boolean0 = dimacsReader0.isUsingMapping();
      assertFalse(dimacsReader0.isVerbose());
      assertFalse(boolean0);
  }
}
