* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 11095
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550554566856
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.25392670157068065
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.15279672578444747
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18533333333333332
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.15037593984962405
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.30708661417322836
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2440944881889764
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.09549795361527967
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 272
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28097731239092494
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.17735334242837653
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.196
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.16917293233082706
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3779527559055118
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.2992125984251969
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1432469304229195
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 345
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.28970331588132636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1869031377899045
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.19866666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18421052631578946
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3464566929133858
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.15279672578444747
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 427
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.33507853403141363
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.22783083219645292
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.252
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4645669291338583
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3779527559055118
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.19099590723055934
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 513
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.34642233856893545
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.23874488403819918
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.26
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5118110236220472
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.20054570259208732
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 523
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.35340314136125656
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2653333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5118110236220472
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2073669849931787
* Search finished after 126s and 5 generations, 10030 statements, best individual has fitness: 2776.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.35340314136125656
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2653333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5118110236220472
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2073669849931787
* Minimizing test suite
[MASTER] 06:39:37.305 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 37%
* Total number of goals: 1146
* Number of covered goals: 423
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 25%
* Total number of goals: 733
* Number of covered goals: 180
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 30
* Number of covered goals: 30
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 28%
* Total number of goals: 750
* Number of covered goals: 207
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 20%
* Total number of goals: 266
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 55%
* Total number of goals: 127
* Number of covered goals: 70
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 42%
* Total number of goals: 127
* Number of covered goals: 53
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 21%
* Total number of goals: 733
* Number of covered goals: 152
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.35340314136125656
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2653333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5118110236220472
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2073669849931787
* Generated 96 tests with total length 2158
* Resulting test suite's coverage: 40% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 06:40:46.238 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.88605% of time used, but only 2/96 tests minimized), falling back to using all assertions
[MASTER] 06:40:53.086 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 0%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.35340314136125656
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24556616643929058
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2653333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.19548872180451127
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5118110236220472
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.41732283464566927
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2073669849931787
* Compiling and checking tests
[MASTER] 06:41:20.588 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 06:41:20.592 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 06:41:25.490 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:25.493 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams(4836.594621, 0.0, (-1.0), 5);
assertNotNull(searchParams0);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());

int int0 = searchParams0.getInitConflictBound();
assertEquals(5, int0);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals((-1.0), double0, 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 37);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(0.0).when(searchParams1).getConflictBoundIncFactor();
doReturn(0).when(searchParams1).getInitConflictBound();
SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());

miniSATRestarts0.init(searchParams1, solverStats0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());

miniSATRestarts0.onRestart();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log("");
iLogAble0.log("");
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, miniSATRestarts0, iLogAble0);
assertNotNull(solver0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

solver0.setLearner(miniSATLearning0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());


[MASTER] 06:41:27.842 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:27.845 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams(0.01, (-1838));
assertNotNull(searchParams0);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 37);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());

int[] intArray0 = solver0.findModel();
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertNotNull(intArray0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(percentLengthLearning1);
assertEquals(10, percentLengthLearning1.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver1);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());

MockPrintStream mockPrintStream0 = new MockPrintStream("Fixed selection strategy.");
assertNotNull(mockPrintStream0);

mockPrintStream0.println();
solver1.printStat((PrintStream) mockPrintStream0, "Can only remove latest added constraint!!!");
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(10, percentLengthLearning1.getLimit());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
assertNotNull(fixedLengthLearning0);
assertEquals(0, fixedLengthLearning0.getMaxLength());

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver1);
assertNotNull(iVecInt0);
assertFalse(iVecInt0.isEmpty());
assertEquals(4, iVecInt0.size());
assertEquals((-4), iVecInt0.last());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(6, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());

solver1.addExactly(iVecInt0, 159);

[MASTER] 06:41:28.870 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:28.872 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertNotNull(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals((-1), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals((-1), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals((-1), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals((-1), lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());

solver1.setLearnedConstraintsDeletionStrategy(solver0.lbd_based);

[MASTER] 06:41:29.798 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:29.812 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

naturalStaticOrder0.undo((-1667));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts(6);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(6, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());

searchParams0.setInitConflictBound((-2967));
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2967), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2967), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(6, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());

boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot decide the satisfiability");
assertFalse(boolean0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(4);
assertNotNull(percentLengthLearning0);
assertEquals(4, percentLengthLearning0.getLimit());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2967), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(6, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(4, percentLengthLearning0.getLimit());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());

boolean boolean1 = solver1.isSatisfiable(true);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-2967), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(6, lubyRestarts0.getFactor());
assertEquals(6L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(4, percentLengthLearning0.getLimit());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());

String string0 = "";
MockPrintWriter mockPrintWriter0 = new MockPrintWriter("", "");

[MASTER] 06:41:31.538 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 06:41:31.540 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

int int0 = 5;
SearchParams searchParams0 = new SearchParams(4836.594621, 0.0, (-1.0), 5);
assertNotNull(searchParams0);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);

int int1 = searchParams0.getInitConflictBound();
assertEquals(5, int1);
assertTrue(int1 == int0);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals((-1.0), double0, 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, naturalStaticOrder0, eMARestarts0);
assertNotNull(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

ILogAble iLogAble0 = solver0.getLogger();
assertNotNull(iLogAble0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>((LearningStrategy<CardinalityDataStructure>) null, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, eMARestarts0, iLogAble0);

[MASTER] 06:41:32.534 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 06:41:32.539 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

SearchParams searchParams0 = new SearchParams(0.01, (-1838));
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, (-1838));
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());

int[] intArray0 = solver0.findModel();
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertNotNull(intArray0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(percentLengthLearning1);
assertEquals(10, percentLengthLearning1.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getImportedUnits());

solverStats0.incConflicts();
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(1L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getImportedUnits());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver1);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());

solver1.initStats(solverStats0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(1L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertNotNull(fixedPeriodRestarts0);
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver2);
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2, solver2.newVar());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

int int0 = 1472;
solver2.enqueue(1472);

[MASTER] 06:41:33.450 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 06:41:33.453 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams(1221);
assertNotNull(searchParams0);
assertEquals(1221, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1221, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());

solver0.setTimeoutMs(1221);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1221, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(1, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());

FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(977);
assertNotNull(fixedLengthLearning0);
assertEquals(977, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

iLogAble0.log("");
iLogAble0.log("");
Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver1);
assertEquals(1221, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(977, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());

String string0 = solver1.getLogPrefix();
assertEquals("c ", string0);
assertNotNull(string0);
assertEquals(1221, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(977, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());


[MASTER] 06:41:34.078 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:34.081 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1));
assertNotNull(percentLengthLearning0);
assertEquals((-1), percentLengthLearning0.getLimit());

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

naturalStaticOrder0.undo((-1667));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

double double0 = searchParams0.getClaDecay();
assertEquals(0.999, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

byte[] byteArray0 = new byte[4];
byteArray0[0] = (byte)32;
byteArray0[1] = (byte) (-35);
byteArray0[2] = (byte) (-127);
byteArray0[3] = (byte)46;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)32, (byte) (-35), (byte) (-127), (byte)46}, byteArray0);
assertEquals(4, byteArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts((-1667));
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1667), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1667), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());

LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts1);
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1667), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals((-1667), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>();
assertNotNull(fixedLengthLearning1);
assertEquals(3, fixedLengthLearning1.getMaxLength());

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-1667), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());

solver1.printStat((PrintStream) null, "$w'1T.+ak=?<q");

[MASTER] 06:41:35.146 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:35.148 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[5];
byteArray0[0] = (byte)1;
byteArray0[1] = (byte) (-64);
byteArray0[2] = (byte)4;
byteArray0[3] = (byte)2;
byteArray0[4] = (byte)57;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)1, (byte) (-64), (byte)4, (byte)2, (byte)57}, byteArray0);
assertEquals(5, byteArray0.length);

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((byte)1);
assertNotNull(percentLengthLearning0);
assertEquals(1, percentLengthLearning0.getLimit());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams(0.0, (byte)57);
assertNotNull(searchParams0);
assertEquals(57, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1.0E100);
assertNotNull(randomWalkDecorator0);
assertEquals(1.0E100, randomWalkDecorator0.getProbability(), 0.01);

randomWalkDecorator0.updateVar(1);
assertEquals(1.0E100, randomWalkDecorator0.getProbability(), 0.01);

randomWalkDecorator0.updateVarAtDecisionLevel(1016);
assertEquals(1.0E100, randomWalkDecorator0.getProbability(), 0.01);

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());

mUSLauncher0.log("|b~fmY>+p_&:=t?");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, noRestarts0, mUSLauncher0);
assertNotNull(solver0);
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, percentLengthLearning0.getLimit());
assertEquals(57, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E100, randomWalkDecorator0.getProbability(), 0.01);
assertFalse(noRestarts0.shouldRestart());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());

solver0.analyzeFinalConflictInTermsOfAssumptions((Constr) null, (IVecInt) null, (byte)2);

[MASTER] 06:41:36.358 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 06:41:36.371 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
SearchParams searchParams0 = new SearchParams(0.01, (-1838));
assertNotNull(searchParams0);
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 37);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());

int[] intArray0 = solver0.findModel();
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertNotNull(intArray0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(percentLengthLearning1);
assertEquals(10, percentLengthLearning1.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver1);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(10, percentLengthLearning1.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());

MockPrintStream mockPrintStream0 = new MockPrintStream("Fixed selection strategy.");
assertNotNull(mockPrintStream0);

mockPrintStream0.println();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchListener<Solver<MixedDataStructureDanielHT>> searchListener0 = (SearchListener<Solver<MixedDataStructureDanielHT>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
solver1.backtrack(intArray0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(10, percentLengthLearning1.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructure>();
assertNotNull(percentLengthLearning2);
assertEquals(10, percentLengthLearning2.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(percentLengthLearning2, cardinalityDataStructure0, searchParams0, tabuListDecorator0, glucose21Restarts0, mUSLauncher0);
assertNotNull(solver2);
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(10, percentLengthLearning2.getLimit());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.nVars());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

solver2.sortOnActivity();
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(10, percentLengthLearning2.getLimit());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(3, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());


[MASTER] 06:41:37.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 06:41:37.380 [logback-1] WARN  JUnitAnalyzer - Failing test:
 byte[] byteArray0 = new byte[5];
byteArray0[1] = (byte) (-64);
byteArray0[2] = (byte)4;
byteArray0[3] = (byte)2;
byteArray0[4] = (byte)57;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte)0, (byte) (-64), (byte)4, (byte)2, (byte)57}, byteArray0);
assertEquals(5, byteArray0.length);

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((byte)0);
assertNotNull(percentLengthLearning0);
assertEquals(0, percentLengthLearning0.getLimit());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

SearchParams searchParams0 = new SearchParams(0.0, (byte)57);
assertNotNull(searchParams0);
assertEquals(57, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1.0E100);
assertNotNull(randomWalkDecorator0);
assertEquals(1.0E100, randomWalkDecorator0.getProbability(), 0.01);

randomWalkDecorator0.updateVar(1);
assertEquals(1.0E100, randomWalkDecorator0.getProbability(), 0.01);

randomWalkDecorator0.updateVarAtDecisionLevel(1016);
assertEquals(1.0E100, randomWalkDecorator0.getProbability(), 0.01);

NoRestarts noRestarts0 = new NoRestarts();
assertNotNull(noRestarts0);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("|b~fmY>+p_&:=t?");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, noRestarts0, mUSLauncher0);
assertNotNull(solver0);
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(57, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0E100, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

solver0.analyzeFinalConflictInTermsOfAssumptions((Constr) null, (IVecInt) null, (byte)2);

[MASTER] 06:41:37.901 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 06:41:37.903 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(3515);
assertNotNull(fixedLengthLearning0);
assertEquals(3515, fixedLengthLearning0.getMaxLength());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getClaDecay();
assertEquals(0.999, double0, 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

naturalStaticOrder0.undo((-1667));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertNotNull(fixedLengthLearning1);
assertEquals(3, fixedLengthLearning1.getMaxLength());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning1, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, (RestartStrategy) null);
assertNotNull(solver0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());

RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
assertNull(restartStrategy0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("|b~fmY>+p_&:=t?");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, (CardinalityDataStructureYanMax) null, searchParams0, naturalStaticOrder0, (RestartStrategy) null, mUSLauncher0);

[MASTER] 06:41:38.834 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:38.854 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 32;
FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(32);
assertNotNull(fixedLengthLearning0);
assertEquals(32, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

String string0 = fixedLengthLearning0.toString();
assertEquals("Limit learning to clauses of size smaller or equal to 32", string0);
assertNotNull(string0);
assertEquals(32, fixedLengthLearning0.getMaxLength());

int int1 = 0;
SearchParams searchParams0 = new SearchParams(1553.4285588031, 0);
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1553.4285588031, double0, 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(1.5).when(searchParams1).getConflictBoundIncFactor();
doReturn(32).when(searchParams1).getInitConflictBound();
SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getPropagations());

miniSATRestarts0.init(searchParams1, solverStats0);
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals(32L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getPropagations());

miniSATRestarts0.onRestart();
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

fixedLengthLearning0.setSolver(solver0);
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());

iLogAble0.log("Limit learning to clauses of size smaller or equal to 32");
Learner learner0 = mock(Learner.class, new ViolatedAssumptionAnswer());
cardinalityDataStructure0.setLearner(learner0);
iLogAble0.log("Limit learning to clauses of size smaller or equal to 32");
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver1);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());

solver1.addAtLeast((IVecInt) null, 1736);

[MASTER] 06:41:39.854 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:39.856 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams(4836.594621, 0.0, (-1.0), 5);
assertNotNull(searchParams0);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());

int int0 = searchParams0.getInitConflictBound();
assertEquals(5, int0);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals((-1.0), double0, 0.01);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
assertNull(doubleArray0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, glucose21Restarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());

solver0.setKeepSolverHot(false);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, glucose21Restarts0, mUSLauncher0);
assertNotNull(solver1);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4836.594621, searchParams0.getVarDecay(), 0.01);
assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(5, searchParams0.getInitConflictBound());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());

StringWriter stringWriter0 = new StringWriter((-2670));

[MASTER] 06:41:40.675 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:40.677 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

int[] intArray0 = new int[2];
intArray0[0] = 868;
intArray0[1] = 158;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertArrayEquals(new int[] {868, 158}, intArray0);
assertEquals(2, intArray0.length);
assertNotNull(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, subsetVarOrder0, eMARestarts0);
assertArrayEquals(new int[] {868, 158}, intArray0);
assertEquals(2, intArray0.length);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

solver0.model();

[MASTER] 06:41:41.634 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:41.647 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics1);
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertNotNull(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

LubyRestarts lubyRestarts0 = new LubyRestarts(2);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(2, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics1, cardinalityDataStructure0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(searchParams0);
assertNotSame(noLearningNoHeuristics1, noLearningNoHeuristics0);
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());

ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(clauseOnlyLearning0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);
assertFalse(solver2.equals((Object)solver1));
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotSame(noLearningNoHeuristics1, noLearningNoHeuristics0);
assertNotSame(solver1, solver2);
assertFalse(noLearningNoHeuristics1.equals((Object)noLearningNoHeuristics0));
assertFalse(solver1.equals((Object)solver2));
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.nVars());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());

solver1.setLearnedConstraintsDeletionStrategy(solver2.size_based);

[MASTER] 06:41:42.510 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:42.513 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertNotNull(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

int int0 = 1212;
LubyRestarts lubyRestarts0 = new LubyRestarts(1212);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(1212, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1212, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());

SearchParams searchParams0 = solver0.getSearchParams();
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(searchParams0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1212, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1212, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1212, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(7, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());

solver1.setLearnedConstraintsDeletionStrategy(solver0.size_based);

[MASTER] 06:41:43.462 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 06:41:43.491 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(2330);
assertNotNull(fixedLengthLearning0);
assertEquals(2330, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

double[] doubleArray0 = new double[8];
doubleArray0[0] = (double) 2330;
doubleArray0[1] = (double) 2330;
doubleArray0[2] = (double) 2330;
doubleArray0[3] = (double) 2330;
doubleArray0[4] = (double) 2330;
doubleArray0[5] = (double) 2330;
doubleArray0[6] = (double) 2330;
doubleArray0[7] = (double) 2330;
VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertArrayEquals(new double[] {2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertNotNull(randomWalkDecorator0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
assertArrayEquals(new double[] {2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0}, doubleArray0, 0.01);
assertArrayEquals(new double[] {2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0}, doubleArray1, 0.01);
assertEquals(8, doubleArray0.length);
assertEquals(8, doubleArray1.length);
assertNotNull(doubleArray1);
assertSame(doubleArray0, doubleArray1);
assertSame(doubleArray1, doubleArray0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertNotNull(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
assertNotNull(tabuListDecorator0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());

randomWalkDecorator0.assignLiteral(2643);
assertArrayEquals(new double[] {2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertSame(doubleArray0, doubleArray1);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertNotNull(fixedPeriodRestarts0);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

boolean boolean1 = fixedPeriodRestarts0.shouldRestart();
assertTrue(boolean1);
assertFalse(boolean1 == boolean0);
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>(714);
assertNotNull(fixedLengthLearning1);
assertEquals(714, fixedLengthLearning1.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, randomWalkDecorator0, glucose21Restarts0);
assertArrayEquals(new double[] {2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertNotNull(solver0);
assertEquals(714, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

int int0 = solver0.getTimeout();
assertEquals(2147483, int0);
assertArrayEquals(new double[] {2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertSame(doubleArray0, doubleArray1);
assertEquals(714, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1579.448002439822);
assertNotNull(activeLearning0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1579.448002439822, activeLearning0.getActivityPercent(), 0.01);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams1 = solver0.getSearchParams();
assertArrayEquals(new double[] {2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertNotNull(searchParams1);
assertSame(doubleArray0, doubleArray1);
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(714, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams1, tabuListDecorator0, glucose21Restarts0);
assertArrayEquals(new double[] {2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertNotNull(solver1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(714, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.nVars());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0, activeLearning0.getLimit());
assertEquals(1579.448002439822, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-1129));
assertNotNull(percentLengthLearning0);
assertEquals((-1129), percentLengthLearning0.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams2 = new SearchParams(1579.448002439822, 1277.601967900871, 2147483, 2643);
assertNotNull(searchParams2);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertEquals(1579.448002439822, searchParams2.getVarDecay(), 0.01);
assertEquals(2147483.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1277.601967900871, searchParams2.getClaDecay(), 0.01);
assertEquals(2643, searchParams2.getInitConflictBound());

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams2, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver2);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertEquals(2330, fixedLengthLearning0.getMaxLength());
assertEquals(1579.448002439822, searchParams2.getVarDecay(), 0.01);
assertEquals(2147483.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1277.601967900871, searchParams2.getClaDecay(), 0.01);
assertEquals(2643, searchParams2.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

ILogAble iLogAble0 = solver2.out;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams2, tabuListDecorator0, fixedPeriodRestarts0, iLogAble0);
assertNotNull(solver3);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertEquals((-1129), percentLengthLearning0.getLimit());
assertEquals(2330, fixedLengthLearning0.getMaxLength());
assertEquals(1579.448002439822, searchParams2.getVarDecay(), 0.01);
assertEquals(2147483.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1277.601967900871, searchParams2.getClaDecay(), 0.01);
assertEquals(2643, searchParams2.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(3, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isVerbose());
assertEquals(2, solver3.newVar());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.decisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(1, solver3.nVars());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

IVecInt iVecInt0 = solver3.createBlockingClauseForCurrentModel();
assertNotNull(iVecInt0);
assertNotSame(searchParams2, searchParams1);
assertNotSame(searchParams2, searchParams0);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertEquals((-1129), percentLengthLearning0.getLimit());
assertEquals(2330, fixedLengthLearning0.getMaxLength());
assertEquals(1579.448002439822, searchParams2.getVarDecay(), 0.01);
assertEquals(2147483.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1277.601967900871, searchParams2.getClaDecay(), 0.01);
assertEquals(2643, searchParams2.getInitConflictBound());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(5, solver2.nVars());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(6, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.decisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(3, solver3.nVars());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(4, solver3.newVar());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.realNumberOfVariables());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

boolean boolean2 = solver1.isSatisfiable(iVecInt0, true);
assertTrue(boolean2);
assertArrayEquals(new double[] {2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0, 2330.0}, doubleArray0, 0.01);
assertEquals(8, doubleArray0.length);
assertNotSame(searchParams2, searchParams1);
assertNotSame(searchParams2, searchParams0);
assertSame(doubleArray0, doubleArray1);
assertNotSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));
assertTrue(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(searchParams1.equals((Object)searchParams2));
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals((-1129), percentLengthLearning0.getLimit());
assertEquals(2330, fixedLengthLearning0.getMaxLength());
assertEquals(1579.448002439822, searchParams2.getVarDecay(), 0.01);
assertEquals(2147483.0, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(1277.601967900871, searchParams2.getClaDecay(), 0.01);
assertEquals(2643, searchParams2.getInitConflictBound());
assertEquals(7, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(8, solver2.newVar());
assertEquals(7, solver2.realNumberOfVariables());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.decisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(5, solver3.realNumberOfVariables());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(6, solver3.newVar());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(5, solver3.nVars());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(714, fixedLengthLearning1.getMaxLength());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(9, solver0.nVars());
assertEquals(0, activeLearning0.getLimit());
assertEquals(1579.448002439822, activeLearning0.getActivityPercent(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());


[MASTER] 06:41:44.114 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:44.116 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(700.08263018).when(searchParams0).getConflictBoundIncFactor();
doReturn((-891)).when(searchParams0).getInitConflictBound();
SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());

miniSATRestarts0.init(searchParams0, solverStats0);
assertEquals((-891L), miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());

miniSATRestarts0.onRestart();
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals((-623774L), miniSATRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, naturalStaticOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals((-623774L), miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());

SearchParams searchParams1 = new SearchParams();
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams1, naturalStaticOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver1);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(solver1.equals((Object)solver0));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals((-623774L), miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());

solver0.addParity((IVecInt) null, false);

[MASTER] 06:41:45.206 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:45.232 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(32);
assertNotNull(fixedLengthLearning0);
assertEquals(32, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

String string0 = fixedLengthLearning0.toString();
assertEquals("Limit learning to clauses of size smaller or equal to 32", string0);
assertNotNull(string0);
assertEquals(32, fixedLengthLearning0.getMaxLength());

SearchParams searchParams0 = new SearchParams(1553.4285588031, 0);
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1553.4285588031, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(0.0).when(searchParams1).getConflictBoundIncFactor();
doReturn(0).when(searchParams1).getInitConflictBound();
SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());

miniSATRestarts0.init(searchParams1, solverStats0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());

miniSATRestarts0.onRestart();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());

fixedLengthLearning0.setSolver(solver0);
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());

iLogAble0.log("");
Learner learner0 = mock(Learner.class, new ViolatedAssumptionAnswer());
cardinalityDataStructure0.setLearner(learner0);
iLogAble0.log("");
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver1);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

solver1.setNeedToReduceDB(true);
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(7, solver1.nVars());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(8, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

solver1.decayActivities();
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(9, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(9, solver1.realNumberOfVariables());
assertEquals(10, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());

IVecInt iVecInt0 = solver2.unsatExplanation();
assertNull(iVecInt0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(3, solver2.nVars());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver3);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.decisionLevel());
assertEquals(1, solver3.nVars());
assertEquals(2, solver3.newVar());
assertEquals(0, solver3.nConstraints());
assertEquals(1, solver3.realNumberOfVariables());

boolean boolean0 = solver3.isSatisfiable();
assertTrue(boolean0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(0, solver3.getPropagationLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.decisionLevel());
assertEquals(3, solver3.nVars());
assertEquals(0, solver3.nConstraints());
assertEquals(4, solver3.newVar());


[MASTER] 06:41:46.183 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 06:41:46.185 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

int int0 = (-1838);
SearchParams searchParams0 = new SearchParams(0.01, (-1838));
assertNotNull(searchParams0);
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 37);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

int[] intArray0 = solver0.findModel();
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);
assertNotNull(intArray0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.01, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-1838), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(percentLengthLearning1);
assertEquals(10, percentLengthLearning1.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning1, cardinalityDataStructureYanMax0, tabuListDecorator0, glucose21Restarts0);
assertNotNull(solver1);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(10, percentLengthLearning1.getLimit());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());

MockPrintStream mockPrintStream0 = new MockPrintStream("Fixed selection strategy.");
assertNotNull(mockPrintStream0);

mockPrintStream0.println();
solver1.enqueue((-1));

[MASTER] 06:41:46.997 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:47.005 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(32);
assertNotNull(fixedLengthLearning0);
assertEquals(32, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

String string0 = fixedLengthLearning0.toString();
assertEquals("Limit learning to clauses of size smaller or equal to 32", string0);
assertNotNull(string0);
assertEquals(32, fixedLengthLearning0.getMaxLength());

SearchParams searchParams0 = new SearchParams(1553.4285588031, 0);
assertNotNull(searchParams0);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1553.4285588031, double0, 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn(1.5).when(searchParams1).getConflictBoundIncFactor();
doReturn(32).when(searchParams1).getInitConflictBound();
SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());

miniSATRestarts0.init(searchParams1, solverStats0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(32L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());

miniSATRestarts0.onRestart();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(miniSATRestarts0.shouldRestart());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());

fixedLengthLearning0.setSolver(solver0);
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(miniSATRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());

iLogAble0.log("");
Learner learner0 = mock(Learner.class, new ViolatedAssumptionAnswer());
cardinalityDataStructure0.setLearner(learner0);
iLogAble0.log("");
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver1);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(miniSATRestarts0.shouldRestart());

solver1.setNeedToReduceDB(true);
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(7, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(8, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(miniSATRestarts0.shouldRestart());

solver1.decayActivities();
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(10, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(9, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(9, solver1.nVars());
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(miniSATRestarts0.shouldRestart());

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.nVars());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());

int[] intArray0 = new int[2];
intArray0[0] = 0;
intArray0[1] = 32;
solver2.backtrack(intArray0);

[MASTER] 06:41:48.233 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 06:41:48.240 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(32);
assertNotNull(fixedLengthLearning0);
assertEquals(32, fixedLengthLearning0.getMaxLength());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

String string0 = fixedLengthLearning0.toString();
assertEquals("Limit learning to clauses of size smaller or equal to 32", string0);
assertNotNull(string0);
assertEquals(32, fixedLengthLearning0.getMaxLength());

SearchParams searchParams0 = new SearchParams(1553.4285588031, 32);
assertNotNull(searchParams0);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1553.4285588031, double0, 0.01);
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
doReturn((double)32).when(searchParams1).getConflictBoundIncFactor();
doReturn(32).when(searchParams1).getInitConflictBound();
SolverStats solverStats0 = new SolverStats();
assertNotNull(solverStats0);
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());

miniSATRestarts0.init(searchParams1, solverStats0);
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(32L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());

miniSATRestarts0.onRestart();
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1024L, miniSATRestarts0.nextRestartNumberOfConflict());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1024L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());

fixedLengthLearning0.setSolver(solver0);
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1024L, miniSATRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());

iLogAble0.log("");
Learner learner0 = mock(Learner.class, new ViolatedAssumptionAnswer());
cardinalityDataStructure0.setLearner(learner0);
iLogAble0.log("");
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, miniSATRestarts0, iLogAble0);
assertNotNull(solver1);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1024L, miniSATRestarts0.nextRestartNumberOfConflict());

solver1.setLearningStrategy(fixedLengthLearning0);
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(7, solver1.nVars());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(8, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1024L, miniSATRestarts0.nextRestartNumberOfConflict());

solver1.setNeedToReduceDB(true);
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(9, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(9, solver1.realNumberOfVariables());
assertEquals(10, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1024L, miniSATRestarts0.nextRestartNumberOfConflict());

solver1.decayActivities();
assertNotSame(solver1, solver0);
assertFalse(solver1.equals((Object)solver0));
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(32, fixedLengthLearning0.getMaxLength());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(11, solver1.nVars());
assertEquals(11, solver1.realNumberOfVariables());
assertEquals(12, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(1553.4285588031, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(1024L, miniSATRestarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);


[MASTER] 06:41:49.062 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:49.066 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertNotNull(miniSATLearning0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PureOrder pureOrder0 = new PureOrder();
assertNotNull(pureOrder0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

pureOrder0.setLits((ILits) null);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(20, pureOrder0.getPeriod());

NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

int int0 = (-418);
SearchParams searchParams0 = new SearchParams((-418));
assertNotNull(searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-418), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);

PositiveLiteralSelectionStrategy positiveLiteralSelectionStrategy0 = new PositiveLiteralSelectionStrategy();
assertNotNull(positiveLiteralSelectionStrategy0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(positiveLiteralSelectionStrategy0);
assertNotNull(varOrderHeap0);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

ILogAble iLogAble0 = ILogAble.CONSOLE;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, glucose21Restarts0, iLogAble0);
assertNotNull(solver0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-418), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());

SearchParams searchParams1 = solver0.getSearchParams();
assertNotNull(searchParams1);
assertSame(searchParams0, searchParams1);
assertSame(searchParams1, searchParams0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-418), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-418), searchParams1.getInitConflictBound());

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, searchParams1, varOrderHeap0, glucose21Restarts0);
assertNotNull(solver1);
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals((-418), searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("positive phase selection", positiveLiteralSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals((-418), searchParams1.getInitConflictBound());

FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, (IOrder) null, glucose21Restarts0);

[MASTER] 06:41:49.790 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:49.792 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(0);
assertNotNull(percentLengthLearning0);
assertEquals(0, percentLengthLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

tabuListDecorator0.assignLiteral((-2809));
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

double double0 = searchParams0.getClaDecay();
assertEquals(0.999, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, miniSATRestarts0, mUSLauncher0);
assertNotNull(solver0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());

int int0 = solver0.nextFreeVarId(false);
assertEquals(3, int0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());


[MASTER] 06:41:50.638 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:50.647 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>(2330);
assertNotNull(fixedLengthLearning0);
assertEquals(2330, fixedLengthLearning0.getMaxLength());

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
doReturn((String) null).when(varOrderHeap0).toString();
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
assertNotNull(randomWalkDecorator0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
assertNull(doubleArray0);
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertNotNull(glucose21Restarts0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

boolean boolean0 = glucose21Restarts0.shouldRestart();
assertFalse(boolean0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

glucose21Restarts0.onBackjumpToRootLevel();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

double double0 = searchParams0.getClaDecay();
assertEquals(0.999, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter("No reason simplification");
assertNotNull(mockPrintWriter0);

mockPrintWriter0.print('J');
mockPrintWriter0.print('J');
mockPrintWriter0.print('J');
mockPrintWriter0.print('`');
mockPrintWriter0.println();
mockPrintWriter0.print('`');
mockPrintWriter0.println();
mockPrintWriter0.print('z');
mockPrintWriter0.println();
mockPrintWriter0.print('J');
mockPrintWriter0.println();
mockPrintWriter0.flush();
mockPrintWriter0.println();
randomWalkDecorator0.printStat(mockPrintWriter0, "No reason simplification");
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);

SolverStats solverStats0 = mock(SolverStats.class, new ViolatedAssumptionAnswer());
glucose21Restarts0.init(searchParams0, solverStats0);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, glucose21Restarts0);
assertNotNull(solver0);
assertEquals(2330, fixedLengthLearning0.getMaxLength());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());

solver0.setNeedToReduceDB(false);
assertEquals(2330, fixedLengthLearning0.getMaxLength());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(2330);
assertNotNull(activeLearning0);
assertEquals(2330.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertNotNull(mUSLauncher0);
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

mUSLauncher0.log("|b~fmY>+p_&:=t?");
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, glucose21Restarts0, mUSLauncher0);
assertNotNull(solver1);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2330.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

solver1.addParity((IVecInt) null, false);

[MASTER] 06:41:53.162 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 06:41:53.171 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertNotNull(naturalStaticOrder0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
assertFalse(boolean0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertNotNull(miniSATRestarts0);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams();
assertNotNull(searchParams0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

double double0 = searchParams0.getClaDecay();
assertEquals(0.999, double0, 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

LubyRestarts lubyRestarts0 = new LubyRestarts(128);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());

NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
assertNotNull(solver0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());

MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver0.getRestartStrategy();
assertNotNull(miniSATRestarts1);
assertSame(miniSATRestarts0, miniSATRestarts1);
assertSame(miniSATRestarts1, miniSATRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertTrue(miniSATRestarts1.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(percentLengthLearning0);
assertEquals(10, percentLengthLearning0.getLimit());

miniSATRestarts0.newConflict();
assertSame(miniSATRestarts0, miniSATRestarts1);
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, lubyRestarts0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());

SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
solver1.setSimplifier(simplificationType0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(1, lubyRestarts0.luby());
assertEquals(128, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, miniSATRestarts0, (ILogAble) null);
assertNotNull(solver2);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

solver2.registerLiteral(128);
assertSame(miniSATRestarts0, miniSATRestarts1);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isSolverKeptHot());
assertEquals(129, solver2.nVars());
assertEquals(130, solver2.newVar());
assertEquals(129, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);


* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
