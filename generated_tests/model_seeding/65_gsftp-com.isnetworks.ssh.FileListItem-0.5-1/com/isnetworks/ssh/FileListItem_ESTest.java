/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 08:40:36 GMT 2019
 */

package com.isnetworks.ssh;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.isnetworks.ssh.FileListItem;
import java.io.File;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileListItem_ESTest extends FileListItem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("^", "eO:UBZF2Ku)!A", false, 330L, 330L);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) fileListItem0);
      FileListItem fileListItem1 = new FileListItem("Svb@4t']H>2", "G1r_wt|+2<ZH:`<", false, 330L, (-706L));
      vector0.add((Object) fileListItem1);
      FileListItem.sort(vector0);
      assertFalse(vector0.contains(false));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("ra", "ra", true, (-283L), (-283L));
      boolean boolean0 = fileListItem0.isDirectory();
      assertEquals((-283L), fileListItem0.getSize());
      assertEquals((-283L), fileListItem0.getLastModify());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      File file0 = new File("pbDriwD&^zV3-kE`X5");
      FileListItem fileListItem0 = new FileListItem(file0);
      fileListItem0.getSize();
      assertFalse(fileListItem0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("", "6s>GJ", false, (-1770L), (-1770L));
      long long0 = fileListItem0.getSize();
      assertEquals("6s>GJ", fileListItem0.getParent());
      assertFalse(fileListItem0.isDirectory());
      assertEquals("", fileListItem0.getName());
      assertEquals((-1770L), long0);
      assertEquals((-1770L), fileListItem0.getLastModify());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      File file0 = new File("pbDriwD&^zV3-kE`X5");
      FileListItem fileListItem0 = new FileListItem(file0);
      String string0 = fileListItem0.getParent();
      assertFalse(fileListItem0.isDirectory());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("", "", false, 142L, 0L);
      fileListItem0.getParent();
      assertEquals(0L, fileListItem0.getLastModify());
      assertEquals(142L, fileListItem0.getSize());
      assertFalse(fileListItem0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      File file0 = MockFile.createTempFile("W_M&Vnu_oHJ?#R", "W_M&Vnu_oHJ?#R");
      FileListItem fileListItem0 = new FileListItem(file0);
      String string0 = fileListItem0.getName();
      assertEquals("/tmp", fileListItem0.getParent());
      assertFalse(fileListItem0.isDirectory());
      assertEquals(1392409281320L, fileListItem0.getLastModify());
      assertEquals(0L, fileListItem0.getSize());
      assertEquals("W_M&Vnu_oHJ?#R0W_M&Vnu_oHJ?#R", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("", "", false, (-1779L), (-1779L));
      fileListItem0.getName();
      assertEquals((-1779L), fileListItem0.getSize());
      assertEquals((-1779L), fileListItem0.getLastModify());
      assertFalse(fileListItem0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = MockFile.createTempFile("W_M&Vnu_oHJ?#R", "W_M&Vnu_oHJ?#R");
      FileListItem fileListItem0 = new FileListItem(file0);
      long long0 = fileListItem0.getLastModify();
      assertFalse(fileListItem0.isDirectory());
      assertEquals(1392409281320L, long0);
      assertEquals("/tmp", fileListItem0.getParent());
      assertEquals(0L, fileListItem0.getSize());
      assertEquals("W_M&Vnu_oHJ?#R0W_M&Vnu_oHJ?#R", fileListItem0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("ra", "ra", true, (-283L), (-283L));
      long long0 = fileListItem0.getLastModify();
      assertTrue(fileListItem0.isDirectory());
      assertEquals((-283L), long0);
      assertEquals((-283L), fileListItem0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("", "", false, 142L, 0L);
      fileListItem0.getAbsolutePath();
      assertEquals(142L, fileListItem0.getSize());
      assertEquals(0L, fileListItem0.getLastModify());
      assertFalse(fileListItem0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        FileListItem.sort((Vector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.FileListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add(object0);
      // Undeclared exception!
      try { 
        FileListItem.sort(vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to com.isnetworks.ssh.FileListItem
         //
         verifyException("com.isnetworks.ssh.FileListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileListItem fileListItem0 = null;
      try {
        fileListItem0 = new FileListItem((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.FileListItem", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("", "eO:UBZF2Ku)!A", false, 330L, 0L);
      boolean boolean0 = fileListItem0.isDirectory();
      assertFalse(boolean0);
      assertEquals("", fileListItem0.getName());
      assertEquals(0L, fileListItem0.getLastModify());
      assertEquals("eO:UBZF2Ku)!A", fileListItem0.getParent());
      assertEquals(330L, fileListItem0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<FileListItem> vector0 = new Vector<FileListItem>();
      FileListItem fileListItem0 = new FileListItem("", "0.", false, 1455L, 1455L);
      vector0.add(fileListItem0);
      FileListItem fileListItem1 = new FileListItem("0.", "0.", false, 1455L, 1455L);
      vector0.add(fileListItem1);
      FileListItem.sort(vector0);
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("!", "!", false, 342L, 342L);
      FileListItem fileListItem1 = new FileListItem("!!", "!!", true, 342L, 342L);
      Vector<FileListItem> vector0 = new Vector<FileListItem>();
      vector0.add(fileListItem0);
      vector0.add(fileListItem1);
      FileListItem.sort(vector0);
      assertTrue(vector0.contains(fileListItem1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<FileListItem> vector0 = new Vector<FileListItem>();
      FileListItem fileListItem0 = new FileListItem("", "", true, 2179L, 2179L);
      vector0.add(fileListItem0);
      MockFile mockFile0 = new MockFile("0.", "0.");
      FileListItem fileListItem1 = new FileListItem(mockFile0);
      vector0.add(fileListItem1);
      FileListItem.sort(vector0);
      assertTrue(vector0.contains(fileListItem1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<FileListItem> vector0 = new Vector<FileListItem>();
      FileListItem fileListItem0 = new FileListItem(".G", "ythnZt@p$^", true, (-89L), (-89L));
      vector0.add(fileListItem0);
      assertEquals((-89L), fileListItem0.getLastModify());
      
      FileListItem fileListItem1 = new FileListItem("..", "ythnZt@p$^.G", true, (-2706L), 0L);
      vector0.add(fileListItem1);
      assertTrue(fileListItem1.isDirectory());
      assertEquals("ythnZt@p$^.G", fileListItem1.getParent());
      assertEquals((-2706L), fileListItem1.getSize());
      assertEquals(0L, fileListItem1.getLastModify());
      assertEquals("..", fileListItem1.getName());
      
      FileListItem.sort(vector0);
      assertTrue(vector0.contains(fileListItem0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vector<FileListItem> vector0 = new Vector<FileListItem>();
      MockFile mockFile0 = new MockFile("..", "..");
      FileListItem fileListItem0 = new FileListItem(mockFile0);
      vector0.add(fileListItem0);
      FileListItem.sort(vector0);
      assertFalse(vector0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("!", "!", false, 342L, 342L);
      fileListItem0.getAbsolutePath();
      assertEquals(342L, fileListItem0.getLastModify());
      assertEquals(342L, fileListItem0.getSize());
      assertFalse(fileListItem0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      File file0 = MockFile.createTempFile("W_M&Vnu_oHJ?#R", "W_M&Vnu_oHJ?#R");
      FileListItem fileListItem0 = new FileListItem(file0);
      String string0 = fileListItem0.getParent();
      assertFalse(fileListItem0.isDirectory());
      assertEquals("W_M&Vnu_oHJ?#R0W_M&Vnu_oHJ?#R", fileListItem0.getName());
      assertEquals("/tmp", string0);
      assertEquals(0L, fileListItem0.getSize());
      assertEquals(1392409281320L, fileListItem0.getLastModify());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem((String) null, "com.isnetworks.ssh.FileListItem", true, 0L, 401L);
      String string0 = fileListItem0.getName();
      assertNull(string0);
      assertEquals(401L, fileListItem0.getLastModify());
      assertTrue(fileListItem0.isDirectory());
      assertEquals(0L, fileListItem0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("", "eO:UBZF2Ku)!A", false, 330L, 0L);
      long long0 = fileListItem0.getLastModify();
      assertEquals(0L, long0);
      assertEquals("eO:UBZF2Ku)!A", fileListItem0.getParent());
      assertFalse(fileListItem0.isDirectory());
      assertEquals(330L, fileListItem0.getSize());
      assertEquals("", fileListItem0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileListItem fileListItem0 = new FileListItem("", "eO:UBZF2Ku)!A", false, 330L, 0L);
      long long0 = fileListItem0.getSize();
      assertEquals("eO:UBZF2Ku)!A", fileListItem0.getParent());
      assertEquals(0L, fileListItem0.getLastModify());
      assertFalse(fileListItem0.isDirectory());
      assertEquals(330L, long0);
      assertEquals("", fileListItem0.getName());
  }
}
